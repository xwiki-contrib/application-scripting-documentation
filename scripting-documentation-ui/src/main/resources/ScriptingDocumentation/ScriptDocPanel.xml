<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<!--
  ~ See the NOTICE file distributed with this work for additional
  ~ information regarding copyright ownership.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<xwikidoc version="1.2" reference="ScriptingDocumentation.ScriptDocPanel" locale="">
  <web>ScriptingDocumentation</web>
  <name>ScriptDocPanel</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>ScriptingDocumentation.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#if ($xcontext.action == 'get')
  #if ($request.get == 'kinds')
    #set ($defaultKinds = ['velocity','script','service','plugin'])
    #set ($availableKinds = $services.scriptdoc.getAvailableBindingKinds())
    #set ($additionalKinds = [])
    #foreach ($bindingKind in $availableKinds)
      #set($kind = $bindingKind.toString())
      #if (!$defaultKinds.contains($kind) &amp;&amp; !$kind.startsWith('internal'))
        #set ($discard = $additionalKinds.add($kind))
      #end
    #end
    #macro (jsonKind $kind $count)
      #if ($count != 1),
      #end
      #set ($prettyname = $!services.localization.render("scriptdoc.kinds.$kind"))
      { "kind" : "$kind", "name" : "#if($prettyname)$prettyname#else$kind#end" }##
    #end
    [
      #foreach ($kind in $defaultKinds)
        #jsonKind($kind $foreach.count)
      #end
      #foreach ($kind in $additionalKinds)
        #jsonKind($kind 0)
      #end

    ]
  #elseif ($request.get == 'bindings')
    [
      #foreach($binding in $services.scriptdoc.getBindingsFinder().find())
        #set($klass = $binding.type.getName())
        #set($ki = $klass.lastIndexOf('.') + 1)
        #if ($foreach.count != 1),
        #end
        {##
          "kind" : "$escapetool.json($binding.kind)", ##
          "name" : "$escapetool.json($binding.fullName)", ##
          "fullname" : "$$escapetool.json($binding.fullName)", ##
          "internal" : $binding.isInternal(), ##
          "deprecated" : $binding.isDeprecated(), ##
          "legacy" : $binding.isLegacy(), ##
          "type" : "${escapetool.json($klass.substring($ki))}"##
          #if($binding.docLink)
            , ##
            "doclink" : "$escapetool.json($binding.docLink)"##
          #end
          #if($binding.resource)
            , ##
            "resource" : {##
              "id" : "$escapetool.json($binding.resource.id)"##
              #if($binding.resource.doclink)
                , ##
                "doclink" : "$escapetool.json($binding.resource.doclink)"##
              #end
            }
          #end
          #if($binding.description)
            , ##
            "description" : "$escapetool.json($services.localization.render($binding.description))"##
          #end
        }##
      #end

    ]
  #end
#end
{{/velocity}}</content>
  <object>
    <name>ScriptingDocumentation.ScriptDocPanel</name>
    <number>0</number>
    <className>Panels.PanelClass</className>
    <guid>d1012dae-c510-4ebd-b8d0-9c6f43950865</guid>
    <class>
      <name>Panels.PanelClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <category>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>category</name>
        <number>5</number>
        <prettyName>Category</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Information|Navigation|Tools|Administration|Other</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </category>
      <content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>content</name>
        <number>4</number>
        <prettyName>Content</prettyName>
        <rows>25</rows>
        <size>120</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <description>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>description</name>
        <number>3</number>
        <prettyName>Description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>type</name>
        <number>2</number>
        <prettyName>Panel type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>view|edit</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </type>
    </class>
    <property>
      <category>Information</category>
    </property>
    <property>
      <content>{{velocity}}
$xwiki.ssx.use('ScriptingDocumentation.ScriptDocPanel')
$xwiki.jsx.use('ScriptingDocumentation.ScriptDocPanel', {'minify': false})
#panelheader($services.localization.render('scriptdoc.panel.title'))

{{html}}
&lt;div id="scriptDocFilter" ng-controller="FilterCtrl"&gt;
  &lt;div class="form-group"&gt;
    &lt;input type="text" id="searchTextBox" class="form-control" ng-model="filterService.searchText" placeholder="$services.localization.render('scriptdoc.panel.search')" style="width: 100%"&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;select id="kindComboBox" class="form-control"
            ng-model="filterService.activeFilters.kind"&gt;
      &lt;option selected value=""&gt;$services.localization.render('scriptdoc.kinds.all')&lt;/option&gt;
      &lt;option ng-repeat="kind in kinds" ng-selected="{{kind.kind == filterService.activeFilters.kind}}" value="{{kind.kind}}" ng-bind="kind.name"&gt;&lt;/option&gt;          
    &lt;/select&gt;
  &lt;/div&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-md-offset-1 col-md-5"&gt;
      &lt;div class="checkbox"&gt;
        &lt;label&gt;
          &lt;input type="checkbox"
                 ng-model="filterService.deprecated"
                 ng-model-options="{ getterSetter: true }"/&gt; Deprecated
        &lt;/label&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-md-5"&gt;
      &lt;div class="checkbox"&gt;
        &lt;label&gt;
          &lt;input type="checkbox"
                 ng-model="filterService.internal"
                 ng-model-options="{ getterSetter: true }"/&gt; Internals
        &lt;/label&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id='scriptDocBindingsList' ng-controller="ListCtrl"&gt;
  &lt;ul class="list-unstyled"&gt;
    &lt;li ng-repeat="binding in bindings | filter:filterService.activeFilters | filter:filterService.searchText | orderBy:'name'" ng-popover title="{{binding.kind=='velocity' || binding.kind=='template' ? '$' : ''}}{{::binding.name}}" data-content="{{::binding.description}}" data-placement="left" ng-click="goto($event, binding.doclink)" ng-class="{'isLink':binding.doclink}"&gt;&lt;span ng-if="binding.internal||binding.deprecated||binding.legacy" ng-class="{'label':true, 'label-primary':binding.internal, 'label-warning':binding.deprecated, 'label-danger':binding.legacy}" ng-bind="::getBindingStateLetter(binding)"&gt;&lt;/span&gt;&lt;span ng-class="{'dollar':true, 'optional':binding.kind!='velocity' &amp;&amp; binding.kind!='template'}" ng-bind-template="$"&gt;&lt;/span&gt;&lt;span ng-bind="::binding.name" ng-class="{'externallink':(binding.doclink &amp;&amp; isExternalUrl(binding.doclink))}"&gt;&lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
{{/html}}

#panelfooter()
{{/velocity}}
</content>
    </property>
    <property>
      <description/>
    </property>
    <property>
      <name>ScriptingDocumentation Panel</name>
    </property>
    <property>
      <type>view</type>
    </property>
  </object>
  <object>
    <name>ScriptingDocumentation.ScriptDocPanel</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>3eff22ba-4a4a-4f31-b3e2-1dc8c336e11a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>// Configure Angular JS to use CDN and fallback to webjars
require.config({
    paths: {
        'css': '$services.webjars.url('require-css/0.1.7/css')',
        'angular': '$services.webjars.url('angularjs/1.3.8/angular.min')',
        'angular-loading-bar': '$services.webjars.url('angular-loading-bar/0.7.1/loading-bar.min')'
    },
    shim: {
        'angular' : {'exports' : 'angular', 'deps': ['jquery']},
        'angular-loading-bar' : {'deps' : ['angular', 'css!angular-loading-bar']}
    }
});

// Use Angular JS and define the xwiki services
require(['angular'],function(angular) {
  /**
   * Scriptdoc services
   */
  var services = angular.module('scriptdoc.xwikiServices', []);

  /**
   * Filter service - Hold active filters for the list of bindings
   */
  services.factory('xwikiService', function() {
    return {
      proxyURL: '${xwiki.getURL('ScriptingDocumentation.WebHome','get','url=')}',
      getKindsURL: '${doc.getURL('get','sheet=&amp;outputSyntax=plain&amp;get=kinds')}',
      getBindingsURL: '${doc.getURL('get','sheet=&amp;outputSyntax=plain&amp;get=bindings')}'      
    };
  });
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>ScriptingDocumentation.ScriptDocPanel</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>668b4d56-a930-4c04-8e85-8b6f74720b01</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>// Use Angular JS and define the scriptoc services and application
require(['jquery','angular','angular-loading-bar'],
        function($, angular) {

  /**
   * Scriptdoc services
   */
  var services = angular.module('scriptdoc.services', ['scriptdoc.xwikiServices']);

  /**
   * Filter service - Hold active filters for the list of bindings
   */
  services.factory('filterService',
                   function() {
    return {

      /**
       * Active filters on the list
       */
      activeFilters: {
        internal: false,
        deprecated: false,
        legacy: false,
      },

      /**
       * Text search used to refine
       */
      searchText: '',

      /**
       * Manage the deprecated filter to stop filtering deprecated and legacy
       * bindings.
       *
       * @param value set to true to display deprecated and legacy bindings.
       * @return return true when deprecated and legacy bindings are NOT
       *         filtered out.
       */
      deprecated: function(value) {
        if (angular.isDefined(value)) {
          if (value) {
            delete this.activeFilters.deprecated;
            delete this.activeFilters.legacy;
          } else {
            this.activeFilters.deprecated = false;
            this.activeFilters.legacy = false;
          }
        }
        return !this.activeFilters.hasOwnProperty('deprecated');
      },

      /**
      * Manage the internal filter to stop filtering internal bindings.
      *
      * @param value set to true to display internal bindings.
      * @return return true when internal bindings are NOT filtered out.
      */
      internal: function(value) {
        if (angular.isDefined(value)) {
          if (value) {
            delete this.activeFilters.internal;
          } else {
            this.activeFilters.internal = false;
          }
        }
        return !this.activeFilters.hasOwnProperty('internal');
      }
    };
  });

  /**
  * Javadoc service - Manage the currently displayed javadoc location
  */
  services.factory('javadocService',
                   ['xwikiService', '$location',
                    function(xwikiService, $location) {

    var _location = null, _base = null, _hash = null, _params = null, _element = $('html'),
        absUrlRE = /^https?:\/\//i,
        hostUrlRE = /^(https?:\/\/[^/]+)/i,
        xwikiUrlRE = /^https?:\/\/[^/]*\.xwiki\.org/i,
        parentRE = /[\-\w]+\/\.\.\//,
        extensionUrlRE = /^https?:\/\/extensions\.xwiki\.org\/?\?id=([^:]+):([^:]+)(?::([^:]+))?:::.+\/apidocs(\/[^?]+)\?is-external=true$/,
        classRE = /^[a-zA-Z_$][a-zA-Z\d_$]+\.(xwiki|xpn)\.([a-zA-Z_$][a-zA-Z\d_$]*\.)*[a-zA-Z_$][a-zA-Z\d_$]*$/;

    function isURLAbsolute(url) {
      return absUrlRE.test(url);
    }

    function isXWikiURL(url) {
      return xwikiUrlRE.test(url);
    }

    function isClassName(name) {
      return classRE.test(name);
    }

    function reduceURL(url) {
      if (!parentRE.test(url)) return url;
      return reduceURL(url.replace(parentRE, ""));
    }

    function getHost(url) {
      return url.match(hostUrlRE)[0];
    }

    function parseExtensionURL(url) {
      var r = url.match(extensionUrlRE);
      if(!r) return null;
      if(!r[3]) {
          // TODO: find version
      }
      return {
          groupId: r[1],
          artifactId: r[2],
          version: r[3],
          jdocPath: r[4]
      }
    }

    function buildJavadocURL(parsedUrl) {
      return 'https://nexus.xwiki.org/nexus/service/local/repositories/public/archive/'
        + parsedUrl.groupId.replace(/\./g,'/') + '/' + parsedUrl.artifactId + '/' + parsedUrl.version + '/'
        + parsedUrl.artifactId + '-' + parsedUrl.version + '-javadoc.jar/!'
        + parsedUrl.jdocPath;
    }

    function scrollToHash(hash) {
      var anchor = hash ? document.getElementById(hash) || $('*[name="' + hash + '"]')[0]: null;
      if (!anchor) {
        return;
      }

      var target = (hash &amp;&amp; anchor) ? $(anchor).offset().top : _element.offset().top,
          distance = target - $(document).scrollTop(),
          speed = Math.sqrt(Math.abs(distance)) * 5;

      if ((hash &amp;&amp; anchor) || distance &lt; 0) { // No scroll down to top
        $('html,body').animate({
          scrollTop: target
        }, speed);
      }
    }

    function setNewLocation(url, hash) {
      if (url != _location || hash != _hash) {
        if (url) {
          _base = url.substring(0, url.lastIndexOf('/'));
          _location = url;
          _hash = hash;
        } else {
          _location = null;
          _base = null;
          _hash = null;
        }
        updateBrowserLocation();
      }
    }

    function updateBrowserLocation() {
      $location.search('url', _location || null);
      if (_hash) {
        $location.hash(_hash);
      }
    }

    function setLocation(value) {
      if (!value || value == '' || typeof value !== "string") {
        setNewLocation(null)
        return;
      }

      var pval = value.split('#'),
          url = pval[0], hash = pval[1] ? decodeURIComponent(pval[1]) : null;

      if (url.startsWith('&amp;')) {
        _params = url;
      } else if (isURLAbsolute(url)) {
        if (isXWikiURL(url)) {
          // compute redirection for Javadoc URL that lead to e.x.o
          var parsedUrl = parseExtensionURL(url)
          if (parsedUrl) {
            url = buildJavadocURL(parsedUrl);
          }

          // set new internal (xwiki) URL location
          setNewLocation(url, hash);
        } else {
          // external (non-xwiki) URL are open in a new window
          window.open(value);
        }
      } else if (_base) {
        if (!url) {
          url = _location;
        } else if (url.startsWith('/')) {
          url = getHost(_base) + url;
        } else {
          url = reduceURL(_base + '/' + url);
        }
        
        if (_location == url) {
          // set new hash only
          _hash = hash;
          scrollToHash(hash);
          updateBrowserLocation();
        } else {
          // set new URL location based on relative URL
          setNewLocation(url, hash);
        }
      } else {
        setNewLocation(null);
      }
    }

    function getPotentialLink(node) {
      if(node.childNodes.length == 1 &amp;&amp; node.firstChild.nodeType == 3) {
        var text = node.firstChild.data;
        if (text &amp;&amp; isClassName(text)) {
          return text;
        } 
      }
      return null;
    }

    return {
      isExternalUrl: function(url) {
        return isURLAbsolute(url) &amp;&amp; !isXWikiURL(url);
      },

      /**
       * URL of the currently selected javadoc
       *
       * @param value The URL to be selected. If the URL is relative, it will be
       *              canonalized based on the previously selected URL. If an
       *              anchor is provided, it will be stripped out and store in
       *              the anchor property below.
       */
      location : function(value) {
        if (angular.isDefined(value)) {
          // Setter
          setLocation(value)
        } else {
          // Getter
          var url = xwikiService.proxyURL;
          if (_location) {
            url += encodeURIComponent(_location);
          }
          if (_params) {
            url += _params;
          }
          return url;
        }
      },

      postLoadHook : function(element) {
        if (_params) {
          _params = null;
          var comments = $(element.children()[0]).contents().filter(function(){ return this.nodeType == 8;});
          if (comments.size() &gt; 0) {
            var url = comments[0].data.trim();
            if (isURLAbsolute(url)) {
              setNewLocation(url, null);
              updateBrowserLocation();
            }
          }
        }
        var hash = location.hash.substring(1);
        if (hash) {
          scrollToHash(hash);
        }
      },

      handleClick : function(event) {
        event.preventDefault();
        var target = $(event.target).attr('href');
        if (target) {
          setLocation(target);
        }
        target = getPotentialLink(event.target);
        if (target) {
          setLocation("&amp;class=" + encodeURIComponent(target));
        }
      },

      hoverIn : function(event) {
        var target = $(event.target);
        if (!target.attr('href') &amp;&amp; getPotentialLink(event.target)) {
          target.addClass('hoverlink');
          $(target).one('mouseleave', function() { target.removeClass('hoverlink') });
        }  
      }
    };
  }]);

  /**
   * Scriptdoc application
   */
  var app = angular.module('scriptdoc',
                           ['angular-loading-bar', 'scriptdoc.xwikiServices', 'scriptdoc.services']);

  app.config(['$locationProvider', 'cfpLoadingBarProvider', function($locationProvider, cfpLoadingBarProvider) {
    $locationProvider.html5Mode({enabled: true, requireBase: false, rewriteLinks: false}).hashPrefix('!');
    cfpLoadingBarProvider.parentSelector = '#contentcontainerinner';
  }]);

  /**
   * List controller
   */
  app.controller('ListCtrl',
                 ['$scope', '$http', 'xwikiService', 'filterService', 'javadocService',
                  function($scope, $http, xwikiService, filterService, javadocService) {
    $scope.filterService = filterService;
    $scope.isExternalUrl = javadocService.isExternalUrl;
    $http.get(xwikiService.getBindingsURL)
      .success(function(data) {
        $scope.bindings = data;
      });
    $scope.getBindingStateLetter = function(binding) {
      if (binding.internal) return 'I';
      return binding.deprecated ? 'D' : 'L';
    };
    $scope.goto = function(event, url) {
      javadocService.location(url);
      event.stopPropagation();
    };
  }]);

  /**
   * Filter controller
   */
  app.controller('FilterCtrl',
                 ['$scope', '$http', 'xwikiService', 'filterService',
                  function($scope, $http, xwikiService, filterService) {
    // Provides bindings to the filter service
    $scope.filterService = filterService;

    // Dynamically fill the list of kinds
    $http.get(xwikiService.getKindsURL)
      .success(function(data) {
        $scope.kinds = data;
      });
  }]);

  /**
   * Javascript controller
   */
  app.controller('JavadocCtrl',
                 ['$scope', '$http', 'javadocService',
                  function($scope, $http, javadocService) {

    // Provides bindings to the javadoc service
    $scope.javadocService = javadocService;
  }]);

  app.directive('javadocDisplayer',
                ['$compile', 'javadocService',
                 function($compile, javadocService){
    return {
      restrict: 'A',
      scope : false,
      transclude:true,
      template: "&lt;div id='javadocdiv' ng-include='javadocService.location()' ng-mouseover='javadocService.hoverIn($event)' ng-click='javadocService.handleClick($event)'&gt;&lt;/div&gt;&lt;div ng-transclude/&gt;",
      link: function($scope, $element, $attrs){
        var el = $element;
        el.removeAttr('style');
        $scope.javadocService = javadocService;
        $scope.$on('$includeContentLoaded', function() {
          var div = el.children('#javadocdiv');
          $scope.loadFailed = false;
          $scope.notFound = !div.html();
          if (!$scope.notFound) {
            javadocService.postLoadHook(el);
          }
        });
        $scope.$on('includeContentError', function() {
          $scope.notFound = false;
          $scope.loadFailed = true;
        });
      }
    };
  }]);

  /**
   * ngPopover directive - Directive to create bootstrap popover on hover
   */
  app.directive('ngPopover', function(){
    return {
      restrict: 'A',
      link: function(scope, element, attrs){
        $(element).hover(function(){
          $(element).popover({
            placement: function() {
              return $(window).width() &lt; 975 ? 'top' : 'left';
            }
          });
          $(element).popover('show');
        }, function(){
          $(element).popover('hide');
        });
      }
    };
  });

  app.run(['javadocService', '$rootScope', '$location', function(javadocService, $rootScope, $location) {
    $rootScope.$on('$locationChangeSuccess', function(event) {
      var url = $location.search().url;
      url = (url) ? url : null; // avoid setter to act as getter since url could be undefined
      javadocService.location(url);
    });
    $(document).ready( function() {
      var container = $('#contentcontainerinner'),
          containerTop = container.offset().top,
          state = true;
      container.css({position:'relative'});
      $(window).on('scroll', function() {
          var scrolled = $(window).scrollTop() &gt;= containerTop;
          if (state &amp;&amp; scrolled) {
              container.removeAttr('style');
              state = false;
          } else if (!state &amp;&amp; !scrolled) {
              container.css({position:'relative'});
              state = true;             
          }
      });
    });
  }]);

  /**
   * Application bootstrapper
   */
  angular.element(document).ready(function() {
    var appScope;
    if (XWiki.currentDocument.space == "ScriptingDocumentation") {
      appScope = $('#contentcontainer');
    } else {
      appScope = $('.ScriptDocPanel');
    }
    angular.bootstrap(appScope, ['scriptdoc']);
  });
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>ScriptingDocumentation.ScriptDocPanel</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>8370f2f1-70d8-429d-8507-88d1d8648429</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>6</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>3</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>1</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>5</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>4</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#scriptDocBindingsList {
   margin: 16px;
}

#scriptDocBindingsList span.label {
  position: absolute;
  left: 22px;
  margin-top: 2px;
  width: 20px;
}

#scriptDocBindingsList li  {
  overflow: hidden;
  text-overflow: ellipsis;
  cursor: not-allowed;
}

#scriptDocBindingsList .externallink {
    background: url($xwiki.getSkinFile('icons/xwiki/external-link.png')) no-repeat scroll right center transparent;
    padding-right: 12px;
}

#scriptDocBindingsList li.isLink  {
  cursor: pointer;
}

#scriptDocBindingsList li.isLink:hover  {
  text-decoration: underline;
}

#scriptDocBindingsList .dollar {
  font-size: 85%;
}

#scriptDocBindingsList .dollar.optional {
  color: #AAA;
}

#scriptDocFilter .checkbox {
  margin-top: 0;
  font-size: 90%;
}

#scriptDocFilter .checkbox input[type="checkbox"] {
  margin-top: 3px;
  margin-bottom: 3px;
}

#loading-bar-spinner {
  right: 10px !important;
  left: inherit !important;
}

#contentcontainerinner[style] #loading-bar-spinner {
  position: absolute !important;
}

#contentcontainerinner[style] #loading-bar .bar {
  position: absolute !important;
}
</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
